{"ast":null,"code":"var _jsxFileName = \"/Users/maxwell/Downloads/ColorTaikoCordova-main/src/App.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useState, useRef, useEffect } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, addEdge, ConnectionMode, ConnectionLineType, MarkerType, Background } from 'reactflow';\nimport CustomNode from './customNode';\nimport ErrorModal from './ErrorModal';\nimport { invertColor, generateRandomColor } from './utils';\nimport 'reactflow/dist/style.css';\nimport './App.css';\nimport { toast } from 'react-toastify';\nimport { BrowserRouter as Router, Switch, Route, Routes } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Settings from './Settings';\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport Popup from 'reactjs-popup';\nimport Modal from 'react-modal';\nimport LargeArcEdge from './LargeArcEdge';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst lineWidths = [1, 2, 3, 4, 5, 6, 8, 10];\nconst proOptions = {\n  hideAttribution: true\n};\nconst reactFlowStyle = {\n  width: '100%',\n  height: 130,\n  paddingBottom: '30px'\n};\nconst initItemStyle = {\n  markerEnd: undefined,\n  markerStart: undefined,\n  animated: false\n};\nconst initWarpStyle = {\n  strokeDasharray: undefined\n};\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst edgeTypes = {\n  largeArc: LargeArcEdge\n};\nconst nodeDefault = {\n  // sourcePosition: Position.Right,\n  // targetPosition: Position.Left,\n  style: {\n    borderRadius: '100%',\n    backgroundColor: 'rgb(227, 213, 194)',\n    width: 27,\n    height: 27,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 'solid 3px #604d93'\n  }\n};\nexport default function App() {\n  _s();\n  const previousColorRef = useRef(null);\n  const MIN_VERTICES = 3;\n  const MAX_VERTICES = 50;\n  const idTop = useRef(0);\n  const idBottom = useRef(100);\n  // const [rfInstance, setRfInstance] = useState(null);\n  const [darkMode, setDarkMode] = useState(false);\n  const [topVertices, setTopVertices] = useState(3);\n  const [bottomVertices, setBottomVertices] = useState(3);\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [lineColor, setLineColor] = useState('#666');\n  const [lineWidth, setLineWidth] = useState(4);\n  const [lineStyle, setLineStyle] = useState('default');\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [settings, setSettings] = useState(false);\n  const currNodeA = useRef(null);\n  const currNodeB = useRef(null);\n  const round = useRef(0);\n  const isTop = useRef(false);\n  const lineStyles = useCallback(() => {\n    return [{\n      key: 'default',\n      name: 'Default',\n      lineComponent: undefined,\n      itemStyle: initItemStyle,\n      // add to edges\n      wrapStyle: initWarpStyle // add to linestyles\n    }, {\n      key: 'dashed',\n      name: 'Dasthed',\n      lineComponent: undefined,\n      itemStyle: {},\n      wrapStyle: {\n        strokeDasharray: '5, 5'\n      }\n    }, {\n      key: 'dotDash',\n      name: 'DotDash',\n      lineComponent: undefined,\n      itemStyle: {},\n      wrapStyle: {\n        strokeDasharray: '1, 5'\n      }\n    }, {\n      key: 'shortDash',\n      name: 'ShortDash',\n      lineComponent: undefined,\n      itemStyle: {},\n      wrapStyle: {\n        strokeDasharray: '5, 5, 1, 5'\n      }\n    }, {\n      key: 'moveDash',\n      name: 'MoveDash',\n      lineComponent: undefined,\n      itemStyle: {\n        animated: true\n      },\n      wrapStyle: {}\n    }, {\n      key: 'endArrow',\n      name: 'EndArrow',\n      lineComponent: undefined,\n      itemStyle: {\n        markerEnd: {\n          type: MarkerType.Arrow\n          // color: lineColor,\n        },\n        animated: false\n      },\n      wrapStyle: {}\n    }, {\n      key: 'endArrowClosed',\n      name: 'EndArrowClosed',\n      lineComponent: undefined,\n      itemStyle: {\n        markerEnd: {\n          type: MarkerType.ArrowClosed\n          // color: lineColor,\n        },\n        animated: false\n      },\n      wrapStyle: {}\n    }, {\n      key: 'bothArrow',\n      name: 'BothArrow',\n      lineComponent: undefined,\n      itemStyle: {\n        markerEnd: {\n          type: MarkerType.Arrow\n          // color: lineColor,\n        },\n        markerStart: {\n          type: MarkerType.Arrow\n          // color: lineColor,\n        },\n        animated: false\n      },\n      wrapStyle: {}\n    }, {\n      key: 'bothArrowClosed',\n      name: 'BothArrowClosed',\n      lineComponent: undefined,\n      itemStyle: {\n        markerEnd: {\n          type: MarkerType.ArrowClosed\n          // color: lineColor,\n        },\n        markerStart: {\n          type: MarkerType.ArrowClosed\n          // color: lineColor,\n        },\n        animated: false\n      },\n      wrapStyle: {}\n    }\n    // {\n    //   key: 'bothArrowClosed',\n    //   name: 'BothArrowClosed',\n    //   lineComponent: undefined,\n    //   itemStyle: {},\n    //   wrapStyle: {}\n    // },\n    ];\n  }, []);\n  useEffect(() => {\n    setNodes(() => []);\n    idTop.current = 0;\n    idBottom.current = 100;\n    const width = 640;\n    const height = 300;\n    // top\n    const topArr = new Array(topVertices).fill(idTop.current + 1);\n    const topItemWidth = (width - 30) / (topVertices - 1);\n    topArr.forEach((_, index) => {\n      addItems({\n        x: index * topItemWidth,\n        y: height * 1 / 8\n      });\n    });\n    // bottom\n    const bottomItemWidth = (width - 30) / (bottomVertices - 1);\n    new Array(bottomVertices).fill(idBottom.current + 1).forEach((_, index) => {\n      addItems({\n        x: index * bottomItemWidth,\n        y: height * 3 / 5\n      });\n    });\n  }, [topVertices, bottomVertices]);\n  useEffect(() => {\n    const style = lineStyles().find(item => item.key === lineStyle);\n    const nds = edges.map(item => {\n      var _item$style, _item$style2, _item$style3;\n      return {\n        ...item,\n        style: {\n          stroke: item === null || item === void 0 ? void 0 : (_item$style = item.style) === null || _item$style === void 0 ? void 0 : _item$style.stroke,\n          strokeWidth: lineWidth,\n          ...initWarpStyle,\n          ...style.wrapStyle\n        },\n        ...initItemStyle,\n        ...{\n          ...style.itemStyle,\n          markerEnd: style.itemStyle.markerEnd ? {\n            ...style.itemStyle.markerEnd,\n            color: item === null || item === void 0 ? void 0 : (_item$style2 = item.style) === null || _item$style2 === void 0 ? void 0 : _item$style2.stroke\n          } : undefined,\n          markerStart: style.itemStyle.markerStart ? {\n            ...style.itemStyle.markerStart,\n            color: item === null || item === void 0 ? void 0 : (_item$style3 = item.style) === null || _item$style3 === void 0 ? void 0 : _item$style3.stroke\n          } : undefined\n        },\n        draggable: false\n      };\n    });\n    // directly setEdges([...nds])ï¼Œdo not re-render lines with arrows\n    if (lineStyle.includes('Arrow')) {\n      setEdges([]);\n      setTimeout(() => {\n        setEdges([...nds]);\n      });\n    } else {\n      setEdges([...nds]);\n    }\n  }, [lineWidth, lineStyle]);\n  const addItems = pos => {\n    let idNode;\n    if (pos.y > 80) {\n      idBottom.current = idBottom.current + 1;\n      idNode = idBottom.current;\n    } else {\n      idTop.current = idTop.current + 1;\n      idNode = idTop.current;\n    }\n    const newNode = {\n      id: idNode.toString(),\n      position: pos,\n      data: {\n        label: ''\n      },\n      type: 'custom',\n      ...nodeDefault\n    };\n    setNodes(nds => nds.concat(newNode));\n  };\n  const availableColors = []; // Array to hold available colors\n\n  const onConnect = useCallback(params => {\n    let randomColorPair;\n\n    // Generate a random color pair if there is no previous pair\n    if (!previousColorRef.current) {\n      randomColorPair = [generateRandomColor(), generateRandomColor()];\n    }\n    let shNode = {};\n    let thNode = {};\n    nodes.forEach(item => {\n      if (item.id === params.source) {\n        shNode = item;\n      }\n      if (item.id === params.target) {\n        thNode = item;\n      }\n    });\n    const style = lineStyles().find(item => item.key === lineStyle);\n    const {\n      source,\n      sourceHandle,\n      target,\n      targetHandle,\n      ...P\n    } = params;\n    let sh = sourceHandle;\n    let th = targetHandle;\n    // Check if an edge already exists between the source and target nodes\n    const isEdgeExists = edges.some(edge => edge.source === source && edge.target === target || edge.source === target && edge.target === source);\n    if (isEdgeExists) {\n      setErrorMessage('An edge already exists between these nodes. Draw another edge.');\n      return; // Prevent adding a new edge\n    }\n    if (shNode.position.y === thNode.position.y) {\n      toast.warning(\"You can't draw horizontal lines\", {\n        position: \"top-center\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      return;\n    } else {\n      if (shNode.position.y < thNode.position.y) {\n        sh = 'c';\n        th = 'a';\n      } else {\n        sh = 'a';\n        th = 'c';\n      }\n    }\n    let colorPairToUse;\n\n    // Use the previous color pair if available, otherwise use the new random color pair\n    if (!previousColorRef.current) {\n      colorPairToUse = randomColorPair;\n      previousColorRef.current = randomColorPair;\n    } else {\n      colorPairToUse = previousColorRef.current;\n      if (!isEdgeExists) {\n        previousColorRef.current = null; // Reset to null after using the previous color pair\n      }\n    }\n    round.current += 1;\n\n    // console.log(count);\n\n    console.log(round.current);\n    console.log(colorPairToUse);\n    let newCurvedEdgeA;\n    let newCurvedEdgeB;\n\n    // see if any demand to generate horizontal lines\n\n    let prevNodeA;\n    let prevNodeB;\n    if (!currNodeA.current && !currNodeB.current) {\n      currNodeA.current = String(Math.max(Number(source), Number(target)));\n      currNodeB.current = String(Math.min(Number(source), Number(target)));\n    } else {\n      prevNodeA = currNodeA.current;\n      prevNodeB = currNodeB.current;\n      currNodeA.current = String(Math.max(Number(source), Number(target)));\n      currNodeB.current = String(Math.min(Number(source), Number(target)));\n    }\n    if (round.current % 2 === 0) {\n      var _style$itemStyle, _style$itemStyle2, _style$itemStyle3, _style$itemStyle4, _style$itemStyle5, _style$itemStyle6, _style$itemStyle7, _style$itemStyle8;\n      // even round, check if demand to draw horizontal lines\n\n      if (currNodeA.current > 100 && prevNodeA > 100) {\n        isTop.current = false;\n      }\n      newCurvedEdgeA = {\n        ...P,\n        source: currNodeA.current,\n        target: prevNodeA,\n        type: 'largeArc',\n        data: {\n          isTopLine: isTop.current\n        },\n        // animated: true,\n\n        style: {\n          stroke: colorPairToUse[0],\n          strokeWidth: lineWidth,\n          ...initWarpStyle,\n          ...style.wrapStyle\n        },\n        ...initItemStyle,\n        ...style.itemStyle,\n        markerEnd: style !== null && style !== void 0 && (_style$itemStyle = style.itemStyle) !== null && _style$itemStyle !== void 0 && _style$itemStyle.markerEnd ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle2 = style.itemStyle) === null || _style$itemStyle2 === void 0 ? void 0 : _style$itemStyle2.markerEnd),\n          color: colorPairToUse[0]\n        } : undefined,\n        markerStart: style !== null && style !== void 0 && (_style$itemStyle3 = style.itemStyle) !== null && _style$itemStyle3 !== void 0 && _style$itemStyle3.markerStart ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle4 = style.itemStyle) === null || _style$itemStyle4 === void 0 ? void 0 : _style$itemStyle4.markerStart),\n          color: colorPairToUse[0]\n        } : undefined\n      };\n      newCurvedEdgeB = {\n        ...P,\n        source: currNodeB.current,\n        target: prevNodeB,\n        type: 'largeArc',\n        // animated: true,\n\n        data: {\n          isTopLine: !isTop.current\n        },\n        style: {\n          stroke: colorPairToUse[0],\n          strokeWidth: lineWidth,\n          ...initWarpStyle,\n          ...style.wrapStyle\n        },\n        ...initItemStyle,\n        ...style.itemStyle,\n        markerEnd: style !== null && style !== void 0 && (_style$itemStyle5 = style.itemStyle) !== null && _style$itemStyle5 !== void 0 && _style$itemStyle5.markerEnd ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle6 = style.itemStyle) === null || _style$itemStyle6 === void 0 ? void 0 : _style$itemStyle6.markerEnd),\n          color: colorPairToUse[0]\n        } : undefined,\n        markerStart: style !== null && style !== void 0 && (_style$itemStyle7 = style.itemStyle) !== null && _style$itemStyle7 !== void 0 && _style$itemStyle7.markerStart ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle8 = style.itemStyle) === null || _style$itemStyle8 === void 0 ? void 0 : _style$itemStyle8.markerStart),\n          color: colorPairToUse[0]\n        } : undefined\n      };\n      if (currNodeB.current === prevNodeB) {\n        newCurvedEdgeB = null;\n      }\n      if (currNodeA.current === prevNodeA) {\n        newCurvedEdgeA = null;\n      }\n    } else {\n      newCurvedEdgeA = null;\n      newCurvedEdgeB = null;\n    }\n    return setEdges(eds =>\n    // addEdge(\n\n    //   {\n\n    //     ...P,\n\n    //     source,\n\n    //     target,\n\n    //     sourceHandle: sh,\n\n    //     targetHandle: th,\n\n    //     type: ConnectionLineType.Straight,\n\n    //     style: {\n\n    //       stroke: colorPairToUse[0], // Use the first color in the pair for the current edge\n\n    //       strokeWidth: lineWidth,\n\n    //       ...initWarpStyle,\n\n    //       ...style.wrapStyle,\n\n    //     },\n\n    //     ...initItemStyle,\n\n    //     ...style.itemStyle,\n\n    //     markerEnd: style?.itemStyle?.markerEnd\n\n    //       ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[1] } // Use the second color in the pair for markers\n\n    //       : undefined,\n\n    //     markerStart: style?.itemStyle?.markerStart\n\n    //       ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[1] } // Use the second color in the pair for markers\n\n    //       : undefined,\n\n    //   },\n\n    //   eds\n\n    // )\n\n    {\n      var _style$itemStyle9, _style$itemStyle10, _style$itemStyle11, _style$itemStyle12;\n      const newEdge = {\n        ...P,\n        source,\n        target,\n        sourceHandle: sh,\n        targetHandle: th,\n        type: ConnectionLineType.Straight,\n        style: {\n          stroke: colorPairToUse[0],\n          // Use the first color in the pair for the current edge\n\n          strokeWidth: lineWidth,\n          ...initWarpStyle,\n          ...style.wrapStyle\n        },\n        ...initItemStyle,\n        ...style.itemStyle,\n        markerEnd: style !== null && style !== void 0 && (_style$itemStyle9 = style.itemStyle) !== null && _style$itemStyle9 !== void 0 && _style$itemStyle9.markerEnd ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle10 = style.itemStyle) === null || _style$itemStyle10 === void 0 ? void 0 : _style$itemStyle10.markerEnd),\n          color: colorPairToUse[1]\n        } : undefined,\n        markerStart: style !== null && style !== void 0 && (_style$itemStyle11 = style.itemStyle) !== null && _style$itemStyle11 !== void 0 && _style$itemStyle11.markerStart ? {\n          ...(style === null || style === void 0 ? void 0 : (_style$itemStyle12 = style.itemStyle) === null || _style$itemStyle12 === void 0 ? void 0 : _style$itemStyle12.markerStart),\n          color: colorPairToUse[1]\n        } : undefined\n      };\n      return [...eds, newEdge, newCurvedEdgeA ? newCurvedEdgeA : [], newCurvedEdgeB ? newCurvedEdgeB : []];\n    });\n  }, [setEdges, lineWidth, lineStyle, nodes, lineStyles, edges]);\n  const closeModal = () => {\n    setErrorMessage(null);\n  };\n  const undoLastLine = () => {\n    setEdges(edges.slice(0, -1));\n  };\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    const egs = edges.map(e => {\n      return {\n        ...e,\n        style: {\n          ...e.style,\n          stroke: invertColor(e.style.stroke)\n        },\n        markerEnd: e.markerEnd ? {\n          ...e.markerEnd,\n          color: invertColor(e.markerEnd.color)\n        } : undefined,\n        markerStart: e.markerStart ? {\n          ...e.markerStart,\n          color: invertColor(e.markerStart.color)\n        } : undefined\n      };\n    });\n    setEdges([...egs]);\n  };\n  function switchSettings() {\n    if (settings) {\n      document.body.classList.add('active-modal');\n    } else {\n      document.body.classList.remove('active-modal');\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: settings && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: toggleSettings,\n          className: \"overlay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"top-vertices\",\n              children: \"Top:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                height: \"20px\"\n              },\n              id: \"top-vertices\",\n              value: topVertices,\n              min: MIN_VERTICES,\n              max: MAX_VERTICES,\n              maxLength: 2,\n              onChange: e => {\n                const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\n                setTopVertices(newValue);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                height: \"20px\"\n              },\n              onClick: () => setTopVertices(Math.min(topVertices + 1, MAX_VERTICES)),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                height: \"20px\"\n              },\n              onClick: () => setTopVertices(Math.max(topVertices - 1, MIN_VERTICES)),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"bottom-vertices\",\n              children: \"Bottom:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                height: \"20px\"\n              },\n              id: \"bottom-vertices\",\n              type: \"number\",\n              value: bottomVertices,\n              min: MIN_VERTICES,\n              max: MAX_VERTICES,\n              maxLength: 2,\n              onChange: e => {\n                const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\n                setBottomVertices(newValue);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                height: \"20px\"\n              },\n              onClick: () => setBottomVertices(Math.min(bottomVertices + 1, MAX_VERTICES)),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                height: \"20px\"\n              },\n              onClick: () => setBottomVertices(Math.max(bottomVertices - 1, MIN_VERTICES)),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"top-vertices\",\n                children: \"Style:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 734,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                style: {\n                  height: \"20px\"\n                },\n                defaultValue: lineStyle,\n                onChange: e => {\n                  setLineStyle(e.target.value);\n                },\n                children: lineStyles().map(lineItem => {\n                  return /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: lineItem.key,\n                    children: lineItem.name\n                  }, lineItem.key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 740,\n                    columnNumber: 34\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 735,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"top-vertices\",\n                children: \"Width:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 749,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                style: {\n                  height: \"20px\"\n                },\n                defaultValue: lineWidth,\n                onChange: e => {\n                  setLineWidth(e.target.value);\n                },\n                children: lineWidths.map(width => {\n                  return /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: width,\n                    children: width\n                  }, width + 'width', false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 754,\n                    columnNumber: 30\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 750,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"top-vertices\",\n                children: \"Line color:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"color\",\n                value: lineColor,\n                onChange: e => {\n                  setLineColor(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 760,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 758,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-modal\",\n            onClick: toggleSettings,\n            children: \"CLOSE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n  ;\n  const toggleSettings = () => {\n    setSettings(!settings);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${darkMode ? 'dark-mode' : ''}`,\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option-switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"undoButton\",\n            onClick: undoLastLine,\n            children: \"Undo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"modeSwitch\",\n            onClick: toggleDarkMode,\n            children: darkMode ? 'Light' : 'Dark'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"settingsButton\",\n            onClick: toggleSettings,\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 19\n          }, this), switchSettings()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"ColorTaiko!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 784,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svg-content\",\n      children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n        style: reactFlowStyle,\n        nodes: nodes,\n        edges: edges,\n        edgeTypes: edgeTypes,\n        proOptions: proOptions\n        // onInit={setRfInstance}\n        ,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onConnectStart: () => {\n          const initColor = generateRandomColor();\n          setLineColor(initColor);\n        },\n        autoPanOnConnect: false // cannot move after connecting\n        ,\n        panOnDrag: false,\n        nodesDraggable: false,\n        nodesFocusable: false,\n        zoomOnScroll: false,\n        zoomOnPinch: false,\n        zoomOnDoubleClick: false,\n        connectionMode: ConnectionMode.Loose,\n        nodeTypes: nodeTypes,\n        connectionLineType: ConnectionLineType.Straight,\n        onEdgeClick: (e, node) => {\n          // change the lines you selected here\n          console.log(e, node);\n        },\n        connectionLineStyle: {\n          stroke: lineColor,\n          strokeWidth: lineWidth,\n          ...lineStyles().find(style => style.key === lineStyle).wrapStyle\n          // strokeDasharray: '5, 5'\n        }\n        // viewportInitialized={false}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 13\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(ErrorModal, {\n        message: errorMessage,\n        onClose: closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 905,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 866,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 783,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"e5d7aBL2dszk1rBobIDtqHLOOT8=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useState","useRef","useEffect","ReactFlow","useNodesState","useEdgesState","addEdge","ConnectionMode","ConnectionLineType","MarkerType","Background","CustomNode","ErrorModal","invertColor","generateRandomColor","toast","BrowserRouter","Router","Switch","Route","Routes","Link","Settings","createBrowserRouter","RouterProvider","Popup","Modal","LargeArcEdge","jsxDEV","_jsxDEV","Fragment","_Fragment","lineWidths","proOptions","hideAttribution","reactFlowStyle","width","height","paddingBottom","initItemStyle","markerEnd","undefined","markerStart","animated","initWarpStyle","strokeDasharray","nodeTypes","custom","edgeTypes","largeArc","nodeDefault","style","borderRadius","backgroundColor","display","alignItems","justifyContent","border","App","_s","previousColorRef","MIN_VERTICES","MAX_VERTICES","idTop","idBottom","darkMode","setDarkMode","topVertices","setTopVertices","bottomVertices","setBottomVertices","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","lineColor","setLineColor","lineWidth","setLineWidth","lineStyle","setLineStyle","errorMessage","setErrorMessage","settings","setSettings","currNodeA","currNodeB","round","isTop","lineStyles","key","name","lineComponent","itemStyle","wrapStyle","type","Arrow","ArrowClosed","current","topArr","Array","fill","topItemWidth","forEach","_","index","addItems","x","y","bottomItemWidth","find","item","nds","map","_item$style","_item$style2","_item$style3","stroke","strokeWidth","color","draggable","includes","setTimeout","pos","idNode","newNode","id","toString","position","data","label","concat","availableColors","onConnect","params","randomColorPair","shNode","thNode","source","target","sourceHandle","targetHandle","P","sh","th","isEdgeExists","some","edge","warning","autoClose","hideProgressBar","closeOnClick","pauseOnHover","progress","colorPairToUse","console","log","newCurvedEdgeA","newCurvedEdgeB","prevNodeA","prevNodeB","String","Math","max","Number","min","_style$itemStyle","_style$itemStyle2","_style$itemStyle3","_style$itemStyle4","_style$itemStyle5","_style$itemStyle6","_style$itemStyle7","_style$itemStyle8","isTopLine","eds","_style$itemStyle9","_style$itemStyle10","_style$itemStyle11","_style$itemStyle12","newEdge","Straight","closeModal","undoLastLine","slice","toggleDarkMode","egs","e","switchSettings","document","body","classList","add","remove","children","className","onClick","toggleSettings","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","value","maxLength","onChange","newValue","parseInt","defaultValue","lineItem","onConnectStart","initColor","autoPanOnConnect","panOnDrag","nodesDraggable","nodesFocusable","zoomOnScroll","zoomOnPinch","zoomOnDoubleClick","connectionMode","Loose","connectionLineType","onEdgeClick","node","connectionLineStyle","message","onClose","_c","$RefreshReg$"],"sources":["/Users/maxwell/Downloads/ColorTaikoCordova-main/src/App.js"],"sourcesContent":["import { useCallback, useState, useRef, useEffect } from 'react';\r\nimport ReactFlow, { useNodesState, useEdgesState, addEdge, ConnectionMode, ConnectionLineType, MarkerType, Background } from 'reactflow';\r\nimport CustomNode from './customNode';\r\nimport ErrorModal from './ErrorModal'; \r\nimport { invertColor, generateRandomColor } from './utils';\r\nimport 'reactflow/dist/style.css';\r\nimport './App.css';\r\nimport { toast } from 'react-toastify';\r\nimport { BrowserRouter as Router, Switch, Route, Routes } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport Settings from './Settings';\r\nimport {\r\n  createBrowserRouter,\r\n  RouterProvider,\r\n} from \"react-router-dom\";\r\nimport Popup from 'reactjs-popup';\r\nimport Modal from 'react-modal';\r\nimport  LargeArcEdge from './LargeArcEdge';\r\n\r\n\r\nconst lineWidths = [1, 2, 3, 4, 5, 6,8,10];\r\n\r\nconst proOptions = { hideAttribution: true };\r\n\r\nconst reactFlowStyle = {\r\n  width: '100%',\r\n  height: 130,\r\n  paddingBottom: '30px',\r\n};\r\n\r\nconst initItemStyle = {\r\n markerEnd: undefined,\r\n markerStart: undefined,\r\n animated: false\r\n}\r\n\r\n\r\nconst initWarpStyle = {\r\n strokeDasharray: undefined\r\n}\r\n\r\n\r\nconst nodeTypes = {\r\n custom: CustomNode,\r\n};\r\n\r\n\r\nconst edgeTypes = {\r\n\r\n  largeArc: LargeArcEdge,\r\n\r\n};\r\n\r\n\r\nconst nodeDefault = {\r\n // sourcePosition: Position.Right,\r\n // targetPosition: Position.Left,\r\n style: {\r\n   borderRadius: '100%',\r\n   backgroundColor: 'rgb(227, 213, 194)',\r\n   width: 27,\r\n   height: 27,\r\n   display: 'flex',\r\n   alignItems: 'center',\r\n   justifyContent: 'center',\r\n   border: 'solid 3px #604d93',\r\n },\r\n}\r\nexport default function App() {\r\n const previousColorRef = useRef(null);\r\n const MIN_VERTICES = 3;\r\n const MAX_VERTICES = 50;\r\n const idTop = useRef(0)\r\n const idBottom = useRef(100)\r\n // const [rfInstance, setRfInstance] = useState(null);\r\n const [darkMode, setDarkMode] = useState(false);\r\n const [topVertices, setTopVertices] = useState(3);\r\n const [bottomVertices, setBottomVertices] = useState(3);\r\n const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n const [lineColor, setLineColor] = useState('#666');\r\n const [lineWidth, setLineWidth] = useState(4);\r\n const [lineStyle, setLineStyle] = useState('default');\r\n const [errorMessage, setErrorMessage] = useState(null);\r\n const [settings, setSettings] = useState(false);\r\n\r\n const currNodeA = useRef(null);\r\n\r\n const currNodeB = useRef(null);\r\n\r\n const round = useRef(0);\r\n\r\n const isTop = useRef(false);\r\n\r\n const lineStyles = useCallback(() => {\r\n   return [\r\n     {\r\n       key: 'default',\r\n       name: 'Default',\r\n       lineComponent: undefined,\r\n       itemStyle: initItemStyle, // add to edges\r\n       wrapStyle: initWarpStyle // add to linestyles\r\n     },\r\n     {\r\n       key: 'dashed',\r\n       name: 'Dasthed',\r\n       lineComponent: undefined,\r\n       itemStyle: {},\r\n       wrapStyle: {\r\n         strokeDasharray: '5, 5'\r\n       }\r\n     },\r\n     {\r\n       key: 'dotDash',\r\n       name: 'DotDash',\r\n       lineComponent: undefined,\r\n       itemStyle: {},\r\n       wrapStyle: {\r\n         strokeDasharray: '1, 5'\r\n       }\r\n     },\r\n     {\r\n       key: 'shortDash',\r\n       name: 'ShortDash',\r\n       lineComponent: undefined,\r\n       itemStyle: {},\r\n       wrapStyle: {\r\n         strokeDasharray: '5, 5, 1, 5'\r\n       }\r\n     },\r\n     {\r\n       key: 'moveDash',\r\n       name: 'MoveDash',\r\n       lineComponent: undefined,\r\n       itemStyle: {\r\n         animated: true\r\n       },\r\n       wrapStyle: {}\r\n     },\r\n     {\r\n       key: 'endArrow',\r\n       name: 'EndArrow',\r\n       lineComponent: undefined,\r\n       itemStyle: {\r\n         markerEnd: {\r\n           type: MarkerType.Arrow,\r\n           // color: lineColor,\r\n         },\r\n         animated: false\r\n       },\r\n       wrapStyle: {}\r\n     },\r\n     {\r\n       key: 'endArrowClosed',\r\n       name: 'EndArrowClosed',\r\n       lineComponent: undefined,\r\n       itemStyle: {\r\n         markerEnd: {\r\n           type: MarkerType.ArrowClosed,\r\n           // color: lineColor,\r\n         },\r\n         animated: false\r\n       },\r\n       wrapStyle: {}\r\n     },\r\n     {\r\n       key: 'bothArrow',\r\n       name: 'BothArrow',\r\n       lineComponent: undefined,\r\n       itemStyle: {\r\n         markerEnd: {\r\n           type: MarkerType.Arrow,\r\n           // color: lineColor,\r\n         },\r\n         markerStart: {\r\n           type: MarkerType.Arrow,\r\n           // color: lineColor,\r\n         },\r\n         animated: false\r\n       },\r\n       wrapStyle: {}\r\n     },\r\n     {\r\n       key: 'bothArrowClosed',\r\n       name: 'BothArrowClosed',\r\n       lineComponent: undefined,\r\n       itemStyle: {\r\n         markerEnd: {\r\n           type: MarkerType.ArrowClosed,\r\n           // color: lineColor,\r\n         },\r\n         markerStart: {\r\n           type: MarkerType.ArrowClosed,\r\n           // color: lineColor,\r\n         },\r\n         animated: false\r\n       },\r\n       wrapStyle: {}\r\n     },\r\n     // {\r\n     //   key: 'bothArrowClosed',\r\n     //   name: 'BothArrowClosed',\r\n     //   lineComponent: undefined,\r\n     //   itemStyle: {},\r\n     //   wrapStyle: {}\r\n     // },\r\n   ]\r\n }, [])\r\n\r\n\r\n useEffect(() => {\r\n   setNodes(() => []);\r\n   idTop.current = 0;\r\n   idBottom.current = 100;\r\n   const width = 640;\r\n   const height = 300;\r\n   // top\r\n   const topArr = new Array(topVertices).fill(idTop.current + 1)\r\n   const topItemWidth = (width - 30) / (topVertices - 1)\r\n   topArr.forEach((_, index) => {\r\n     addItems({x: index * topItemWidth, y: height * 1 / 8})\r\n   })\r\n   // bottom\r\n   const bottomItemWidth = (width - 30) / (bottomVertices - 1)\r\n   new Array(bottomVertices).fill(idBottom.current + 1).forEach((_, index) => {\r\n     addItems({x: index * bottomItemWidth, y: height * 3 / 5})\r\n   })\r\n }, [topVertices, bottomVertices])\r\n\r\n\r\n useEffect(() => {\r\n     const style = lineStyles().find((item) => item.key === lineStyle)\r\n     const nds = edges.map((item) => {\r\n    return {\r\n      ...item,\r\n      style: {\r\n        stroke: item?.style?.stroke,\r\n        strokeWidth: lineWidth,\r\n        ...initWarpStyle,\r\n        ...style.wrapStyle,\r\n      },\r\n      ...initItemStyle,\r\n      ...{\r\n        ...style.itemStyle,\r\n        markerEnd: style.itemStyle.markerEnd ? {...style.itemStyle.markerEnd, color: item?.style?.stroke,} : undefined,\r\n        markerStart: style.itemStyle.markerStart ? {...style.itemStyle.markerStart, color: item?.style?.stroke} : undefined,\r\n      },\r\n      draggable: false,\r\n    }\r\n   })\r\n   // directly setEdges([...nds])ï¼Œdo not re-render lines with arrows\r\n   if (lineStyle.includes('Arrow')) {\r\n     setEdges([])\r\n     setTimeout(() => {\r\n       setEdges([...nds])\r\n     });\r\n   } else {\r\n     setEdges([...nds])\r\n   }\r\n }, [lineWidth, lineStyle])\r\n\r\n\r\n const addItems = (pos) => {\r\n   let idNode;\r\n   if (pos.y > 80) {\r\n     idBottom.current = idBottom.current + 1;\r\n     idNode = idBottom.current\r\n   } else {\r\n     idTop.current = idTop.current + 1;\r\n     idNode = idTop.current\r\n   }\r\n   const newNode = {\r\n     id: idNode.toString(),\r\n     position: pos,\r\n     data: { label: '' },\r\n     type: 'custom',\r\n     ...nodeDefault\r\n   };\r\n   setNodes((nds) => nds.concat(newNode));\r\n }\r\n\r\n\r\n const availableColors = []; // Array to hold available colors\r\n\r\n const onConnect = useCallback(\r\n  (params) => {\r\n    let randomColorPair;\r\n\r\n    // Generate a random color pair if there is no previous pair\r\n    if (!previousColorRef.current) {\r\n      randomColorPair = [generateRandomColor(), generateRandomColor()];\r\n    }\r\n\r\n    let shNode = {};\r\n    let thNode = {};\r\n\r\n    nodes.forEach((item) => {\r\n      if (item.id === params.source) {\r\n        shNode = item;\r\n      }\r\n      if (item.id === params.target) {\r\n        thNode = item;\r\n      }\r\n    });\r\n\r\n    const style = lineStyles().find((item) => item.key === lineStyle);\r\n    const { source, sourceHandle, target, targetHandle, ...P } = params;\r\n    let sh = sourceHandle;\r\n    let th = targetHandle;\r\n    // Check if an edge already exists between the source and target nodes\r\n    const isEdgeExists = edges.some(edge => (  (edge.source === source && edge.target === target) ||  (edge.source === target && edge.target === source)  ));\r\n\r\n    if (isEdgeExists) {\r\n      setErrorMessage('An edge already exists between these nodes. Draw another edge.');\r\n      return; // Prevent adding a new edge\r\n    }\r\n\r\n    if (shNode.position.y === thNode.position.y) {\r\n      toast.warning(\"You can't draw horizontal lines\", {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return\r\n\r\n      \r\n    } else {\r\n      if (shNode.position.y < thNode.position.y) {\r\n        sh = 'c';\r\n        th = 'a';\r\n      } else {\r\n        sh = 'a';\r\n        th = 'c';\r\n      }\r\n    }\r\n\r\n    let colorPairToUse;\r\n\r\n    // Use the previous color pair if available, otherwise use the new random color pair\r\n    if (!previousColorRef.current ) {\r\n      colorPairToUse = randomColorPair;\r\n      previousColorRef.current = randomColorPair;\r\n    } else {\r\n      colorPairToUse = previousColorRef.current;\r\n      if (!isEdgeExists) {\r\n        previousColorRef.current = null; // Reset to null after using the previous color pair\r\n      }\r\n    }\r\n\r\n\r\n    \r\n\r\n    round.current +=1;\r\n\r\n    // console.log(count);\r\n\r\n    console.log(round.current);\r\n\r\n    console.log(colorPairToUse);\r\n\r\n    let newCurvedEdgeA;\r\n\r\n    let newCurvedEdgeB;\r\n\r\n    // see if any demand to generate horizontal lines\r\n\r\n    let prevNodeA;\r\n\r\n    let prevNodeB;\r\n\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n    if (!currNodeA.current && !currNodeB.current) {\r\n\r\n      currNodeA.current =  String(Math.max(Number(source), Number(target)));\r\n\r\n      currNodeB.current =  String(Math.min(Number(source), Number(target)));\r\n\r\n    } else {\r\n\r\n      prevNodeA = currNodeA.current;\r\n\r\n      prevNodeB = currNodeB.current;\r\n\r\n      currNodeA.current =  String(Math.max(Number(source), Number(target)));\r\n\r\n      currNodeB.current =  String(Math.min(Number(source), Number(target)));\r\n\r\n    }\r\n\r\n    \r\n\r\n    if (round.current % 2 === 0) {    // even round, check if demand to draw horizontal lines\r\n\r\n      if (currNodeA.current > 100 && prevNodeA > 100) {\r\n\r\n        isTop.current = false;\r\n\r\n      }\r\n\r\n      newCurvedEdgeA = {\r\n\r\n        ...P,\r\n\r\n        source: currNodeA.current,\r\n\r\n        target: prevNodeA,\r\n\r\n        type: 'largeArc', \r\n\r\n        data: { isTopLine: isTop.current },\r\n\r\n        // animated: true,\r\n\r\n        style: {\r\n\r\n          stroke: colorPairToUse[0], \r\n\r\n          strokeWidth: lineWidth,\r\n\r\n          ...initWarpStyle,\r\n\r\n          ...style.wrapStyle, \r\n\r\n        },\r\n\r\n        \r\n\r\n          ...initItemStyle,\r\n\r\n          ...style.itemStyle,\r\n\r\n          markerEnd: style?.itemStyle?.markerEnd\r\n\r\n            ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[0] }\r\n\r\n            : undefined,\r\n\r\n          markerStart: style?.itemStyle?.markerStart\r\n\r\n            ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[0] }\r\n\r\n            : undefined,\r\n\r\n      };  \r\n\r\n\r\n\r\n      \r\n\r\n\r\n\r\n      newCurvedEdgeB = {\r\n\r\n        ...P,\r\n\r\n        source: currNodeB.current,\r\n\r\n        target: prevNodeB,\r\n\r\n        type: 'largeArc',\r\n\r\n        // animated: true,\r\n\r\n        data: { isTopLine: !isTop.current },\r\n\r\n        style: {\r\n\r\n          stroke: colorPairToUse[0], \r\n\r\n          strokeWidth: lineWidth,\r\n\r\n          ...initWarpStyle,\r\n\r\n          ...style.wrapStyle, \r\n\r\n        },\r\n\r\n        \r\n\r\n          ...initItemStyle,\r\n\r\n          ...style.itemStyle,\r\n\r\n          markerEnd: style?.itemStyle?.markerEnd\r\n\r\n            ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[0] }\r\n\r\n            : undefined,\r\n\r\n          markerStart: style?.itemStyle?.markerStart\r\n\r\n            ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[0] }\r\n\r\n            : undefined,\r\n\r\n      };  \r\n\r\n\r\n\r\n      if (currNodeB.current === prevNodeB) {\r\n\r\n        newCurvedEdgeB = null;\r\n\r\n      }\r\n\r\n      if (currNodeA.current === prevNodeA) {\r\n\r\n        newCurvedEdgeA = null;\r\n\r\n      }\r\n\r\n    } else  {\r\n\r\n      newCurvedEdgeA = null;\r\n\r\n      newCurvedEdgeB = null;\r\n\r\n    }\r\n\r\n\r\n    return setEdges((eds) =>\r\n\r\n      // addEdge(\r\n\r\n      //   {\r\n\r\n      //     ...P,\r\n\r\n      //     source,\r\n\r\n      //     target,\r\n\r\n      //     sourceHandle: sh,\r\n\r\n      //     targetHandle: th,\r\n\r\n      //     type: ConnectionLineType.Straight,\r\n\r\n      //     style: {\r\n\r\n      //       stroke: colorPairToUse[0], // Use the first color in the pair for the current edge\r\n\r\n      //       strokeWidth: lineWidth,\r\n\r\n      //       ...initWarpStyle,\r\n\r\n      //       ...style.wrapStyle,\r\n\r\n      //     },\r\n\r\n      //     ...initItemStyle,\r\n\r\n      //     ...style.itemStyle,\r\n\r\n      //     markerEnd: style?.itemStyle?.markerEnd\r\n\r\n      //       ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[1] } // Use the second color in the pair for markers\r\n\r\n      //       : undefined,\r\n\r\n      //     markerStart: style?.itemStyle?.markerStart\r\n\r\n      //       ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[1] } // Use the second color in the pair for markers\r\n\r\n      //       : undefined,\r\n\r\n      //   },\r\n\r\n      //   eds\r\n\r\n      // )\r\n\r\n      {\r\n\r\n\r\n\r\n\r\n\r\n        const newEdge = {\r\n\r\n          ...P,\r\n\r\n          source,\r\n\r\n          target,\r\n\r\n          sourceHandle: sh,\r\n\r\n          targetHandle: th,\r\n\r\n          type: ConnectionLineType.Straight,\r\n\r\n          style: {\r\n\r\n            stroke: colorPairToUse[0], // Use the first color in the pair for the current edge\r\n\r\n            strokeWidth: lineWidth,\r\n\r\n            ...initWarpStyle,\r\n\r\n            ...style.wrapStyle,\r\n\r\n          },\r\n\r\n          ...initItemStyle,\r\n\r\n          ...style.itemStyle,\r\n\r\n          markerEnd: style?.itemStyle?.markerEnd\r\n\r\n            ? { ...style?.itemStyle?.markerEnd, color: colorPairToUse[1] }\r\n\r\n            : undefined,\r\n\r\n          markerStart: style?.itemStyle?.markerStart\r\n\r\n            ? { ...style?.itemStyle?.markerStart, color: colorPairToUse[1] }\r\n\r\n            : undefined,\r\n\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n      \r\n\r\n        return [...eds, newEdge, newCurvedEdgeA ? newCurvedEdgeA: [], newCurvedEdgeB ? newCurvedEdgeB:[]  ];\r\n\r\n\r\n\r\n      });\r\n\r\n  },\r\n\r\n  [setEdges, lineWidth, lineStyle, nodes, lineStyles, edges]\r\n\r\n);\r\n\r\n\r\nconst closeModal = () => {\r\n  setErrorMessage(null);\r\n};\r\n\r\n\r\n const undoLastLine = () => {\r\n   setEdges(edges.slice(0, -1));\r\n };\r\n\r\n\r\n const toggleDarkMode = () => {\r\n   setDarkMode(!darkMode);\r\n   const egs = edges.map(e => {\r\n     return {\r\n       ...e,\r\n       style: {...e.style, stroke: invertColor(e.style.stroke)},\r\n       markerEnd: e.markerEnd ? {\r\n         ...e.markerEnd,\r\n         color: invertColor(e.markerEnd.color),\r\n       } : undefined,\r\n       markerStart: e.markerStart ? {\r\n         ...e.markerStart,\r\n         color: invertColor(e.markerStart.color),\r\n       } : undefined,\r\n     }\r\n   })\r\n   setEdges([...egs])\r\n };\r\n\r\n function switchSettings() {\r\n\r\n  if(settings) {\r\n    document.body.classList.add('active-modal')\r\n  } else {\r\n    document.body.classList.remove('active-modal')\r\n  }\r\n\r\n    return (\r\n      <>\r\n        {settings && (\r\n        <div className=\"modal2\">\r\n          <div onClick={toggleSettings} className=\"overlay\"></div>\r\n          <div className=\"modal-content\">\r\n            <div className=\"input-container\">\r\n                  <label htmlFor=\"top-vertices\">Top:</label>\r\n                  <input\r\n                  style={{height: \"20px\"}}\r\n                    id=\"top-vertices\"\r\n                    value={topVertices}\r\n                    min={MIN_VERTICES}\r\n                    max={MAX_VERTICES}\r\n                    maxLength={2}\r\n                    onChange={(e) => {\r\n                      const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\r\n                      setTopVertices(newValue);\r\n                    }}\r\n                  />\r\n                  <button style={{height: \"20px\"}} onClick={() => setTopVertices(Math.min(topVertices + 1, MAX_VERTICES))}>+</button>\r\n                  <button style={{height: \"20px\"}} onClick={() => setTopVertices(Math.max(topVertices - 1, MIN_VERTICES))}>-</button>\r\n            </div>\r\n\r\n            <div className=\"input-container\">\r\n                    <label htmlFor=\"bottom-vertices\">Bottom:</label>\r\n                    <input \r\n                      style={{height: \"20px\"}} \r\n                      id=\"bottom-vertices\"\r\n                      type=\"number\"\r\n                      value={bottomVertices}\r\n                      min={MIN_VERTICES}\r\n                      max={MAX_VERTICES}\r\n                      maxLength={2}\r\n                      onChange={(e) => {\r\n                        const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\r\n                        setBottomVertices(newValue);\r\n                      }}\r\n                    />\r\n                    <button style={{height: \"20px\"}} onClick={() => setBottomVertices(Math.min(bottomVertices + 1, MAX_VERTICES))}>+</button>\r\n                    <button style={{height: \"20px\"}} onClick={() => setBottomVertices(Math.max(bottomVertices - 1, MIN_VERTICES))}>-</button>\r\n              </div>\r\n\r\n\r\n              <div>\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"top-vertices\">Style:</label>\r\n                    <select style={{height: \"20px\"}} defaultValue={lineStyle} onChange={(e) => {\r\n                      setLineStyle(e.target.value)\r\n                    }}>\r\n                      {\r\n                        lineStyles().map((lineItem) => {\r\n                          return <option key={lineItem.key} value={lineItem.key}>{lineItem.name}</option>\r\n                        })\r\n                      }\r\n                    </select>\r\n                  </div>\r\n              </div>\r\n\r\n              <div>\r\n                <div className=\"input-container\">\r\n                  <label htmlFor=\"top-vertices\">Width:</label>\r\n                  <select style={{height: \"20px\"}} defaultValue={lineWidth} onChange={(e) => {\r\n                    setLineWidth(e.target.value)\r\n                  }}>\r\n                    {lineWidths.map(width => {\r\n                      return <option key={width + 'width'} value={width}>{width}</option>\r\n                    })}\r\n                  </select>\r\n                </div>\r\n                <div className=\"input-container\">\r\n                  <label htmlFor=\"top-vertices\">Line color:</label>\r\n                  <input type='color' value={lineColor} onChange={(e) => {\r\n                    setLineColor(e.target.value)\r\n                  }} />\r\n                </div>\r\n              </div>\r\n\r\n              \r\n\r\n            <button className=\"close-modal\" onClick={toggleSettings}>\r\n              CLOSE\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      </>\r\n    )\r\n };\r\n\r\n const toggleSettings = () => {\r\n  setSettings(!settings);\r\n};\r\n\r\n return (\r\n        <div className={`App ${darkMode ? 'dark-mode' : ''}`} style={{ height: '100vh' }}>\r\n          <div className='option-wrap'>\r\n            <div className='option-title'>\r\n              <div className='option-switch'>\r\n                <button id = 'undoButton' onClick={undoLastLine}>Undo</button>\r\n                <button id=\"modeSwitch\" onClick={toggleDarkMode}>{darkMode ? 'Light' : 'Dark'}</button>\r\n              </div>\r\n              <div className='settings'>\r\n                  <button id=\"settingsButton\" onClick={toggleSettings}>Settings</button>\r\n                  {switchSettings()}\r\n              </div>\r\n              <h1 className=\"title\">ColorTaiko!</h1>\r\n            </div>\r\n            <div className='input-wrap'>\r\n            <div>\r\n                {/* <div className=\"input-container\">\r\n                  <label htmlFor=\"top-vertices\">Top:</label>\r\n                  <input\r\n                    id=\"top-vertices\"\r\n                    value={topVertices}\r\n                    min={MIN_VERTICES}\r\n                    max={MAX_VERTICES}\r\n                    maxLength={2}\r\n                    onChange={(e) => {\r\n                      const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\r\n                      setTopVertices(newValue);\r\n                    }}\r\n                  />\r\n                  <button onClick={() => setTopVertices(Math.min(topVertices + 1, MAX_VERTICES))}>+</button>\r\n                  <button onClick={() => setTopVertices(Math.max(topVertices - 1, MIN_VERTICES))}>-</button>\r\n                </div> */}\r\n                {/* <div className=\"input-container\">\r\n                  <label htmlFor=\"bottom-vertices\">Bottom:</label>\r\n                  <input\r\n                    id=\"bottom-vertices\"\r\n                    type=\"number\"\r\n                    value={bottomVertices}\r\n                    min={MIN_VERTICES}\r\n                    max={MAX_VERTICES}\r\n                    maxLength={2}\r\n                    onChange={(e) => {\r\n                      const newValue = Math.min(Math.max(parseInt(e.target.value), MIN_VERTICES), MAX_VERTICES);\r\n                      setBottomVertices(newValue);\r\n                    }}\r\n                  />\r\n                  <button onClick={() => setBottomVertices(Math.min(bottomVertices + 1, MAX_VERTICES))}>+</button>\r\n                  <button onClick={() => setBottomVertices(Math.max(bottomVertices - 1, MIN_VERTICES))}>-</button>\r\n                </div> */}\r\n              </div>\r\n              {/* <div>\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"top-vertices\">Style:</label>\r\n                    <select defaultValue={lineStyle} onChange={(e) => {\r\n                      setLineStyle(e.target.value)\r\n                    }}>\r\n                      {\r\n                        lineStyles().map((lineItem) => {\r\n                          return <option key={lineItem.key} value={lineItem.key}>{lineItem.name}</option>\r\n                        })\r\n                      }\r\n                    </select>\r\n                  </div>\r\n              </div> */}\r\n              {/* <div>\r\n                <div className=\"input-container\">\r\n                  <label htmlFor=\"top-vertices\">Width:</label>\r\n                  <select defaultValue={lineWidth} onChange={(e) => {\r\n                    setLineWidth(e.target.value)\r\n                  }}>\r\n                    {lineWidths.map(width => {\r\n                      return <option key={width + 'width'} value={width}>{width}</option>\r\n                    })}\r\n                  </select>\r\n                </div>\r\n                <div className=\"input-container\">\r\n                  <label htmlFor=\"top-vertices\">Line color:</label>\r\n                  <input type='color' value={lineColor} onChange={(e) => {\r\n                    setLineColor(e.target.value)\r\n                  }} />\r\n                </div>\r\n              </div> */}\r\n            </div>\r\n          </div>\r\n          <div className='svg-content'>\r\n            <ReactFlow\r\n              style={reactFlowStyle}\r\n              nodes={nodes}\r\n              edges={edges}\r\n              edgeTypes={edgeTypes}\r\n              proOptions={proOptions}\r\n              // onInit={setRfInstance}\r\n              onNodesChange={onNodesChange}\r\n              onEdgesChange={onEdgesChange}\r\n              onConnect={onConnect}\r\n              onConnectStart={() => {\r\n                const initColor = generateRandomColor()\r\n                setLineColor(initColor)\r\n              }}\r\n              autoPanOnConnect={false} // cannot move after connecting\r\n              panOnDrag={false}\r\n              nodesDraggable={false}\r\n              nodesFocusable={false}\r\n              zoomOnScroll={false}\r\n              zoomOnPinch={false}\r\n              zoomOnDoubleClick={false}\r\n              connectionMode={ConnectionMode.Loose}\r\n              nodeTypes={nodeTypes}\r\n              connectionLineType={ConnectionLineType.Straight}\r\n              onEdgeClick={(e, node) => {\r\n                // change the lines you selected here\r\n                console.log(e, node)\r\n              }}\r\n              connectionLineStyle={{\r\n                stroke: lineColor,\r\n                strokeWidth: lineWidth,\r\n                ...(lineStyles().find((style) => style.key === lineStyle).wrapStyle)\r\n                // strokeDasharray: '5, 5'\r\n              }}\r\n              // viewportInitialized={false}\r\n            />\r\n\r\n            {/* Render the error modal if there's an error message */}\r\n            {errorMessage && <ErrorModal message={errorMessage} onClose={closeModal} />}\r\n          </div> \r\n        </div>\r\n );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}